[
  {
    "objectID": "Exercise_1.html",
    "href": "Exercise_1.html",
    "title": "Exercise 1",
    "section": "",
    "text": "You must always load the Pmetrics library first.\n\n#library(Pmetrics)\ndevtools::load_all()\n\n\nFirst NPAG run - tlag, ka, kel, vol\n\nWorking directory\nYou must always tell R where your working directory is going to be. This is the directory where R expects to find files and where it will save output files. You can set your working directory with the setwd() function.\nWindows users: Make sure that you separate directories with a forward slash “/” or double backslashes “\\”. Unfortunately, Windows is the only OS that uses backslashes ““, so R conforms to Unix/Linux style with the forward slash. If you copy the example below, make sure to change the path to one that exists on your computer.\n\n# change the path to one that exists on your computer\nsetwd(\"/path/to/your/project/directory\") # Mac and Linux users\nsetwd(\"C:/path/to/your/project/directory\") # Windows users\n\n\n\nData objects\nPmetrics always needs data and a model to run, so let’s create a new data object. We will set the limit of quantification (loq) to 1. See ?PM_data for help.\n\nexData &lt;- PM_data$new(data = \"../Examples/src/ex.csv\", loq = 1)\n\nDATA STANDARDIZATION REPORT:\n\n EVID inferred as 0 for observations, 1 for doses.\n All doses assumed to be oral (DUR = 0).\n ADDL set to missing for all records.\n II set to missing for all records.\n All doses assumed to be INPUT = 1.\n All observations assumed to be OUTEQ = 1.\n One or more error coefficients not specified. Error in model object will be used.\n\nDATA VALIDATION REPORT:\n\nNo data errors found.\n\n\nℹ FIX DATA REPORT:\nThere were no errors to fix in you data file.\n\n\nHere we did execute the code so you can see the output. Pmetrics standardizes the data, checks for errors, and provides an error and attempted fix report fo any found.\nYou can look at a .csv data file directly by opening it in a spreadsheet program like Excel, or a text editor.\nexData is an R6 object, which means that contains both data and methods to process that data.\n\nexData # prints the object, usually to the terminal, but in this case to a rendered \"lite\" spreadsheet\nexData$data # contains your original data\nexData$standard_data # contains the standardized and validated data\nexData$summary() # prints the summary of the data to the terminal\n\nMost Pmetrics objects are R6 objects, so you can use the $ operator to access their data and methods. Many of them have a summary() method that prints a summary of the object to the console and a plot() method that creates a plot of the object. See ?PM_data for more information on the PM_data class and its methods.\nNote: We recognize that many users are familiar with the “S3 framework” in R, which uses functions like summary(object) and plot(object). To comply with better programming standards, Pmetrics uses the R6 framework. However, we have provided S3 methods for most functions, so you can use summary(object) and plot(object) if you prefer.\n\n# S3 method to summarize data\nsummary(exData)\n\nPM_data has a plot() method that creates a plot of the data. See ?plot.PM_data for more information.\n\n# piping to plotlygg() turns the interractive plotly plot to a static ggplot2 plot \nexData$plot() %&gt;% plotlygg()\n\n\n\n\n\n\n\n\nWe have piped (%&gt;%) the plot to plotlygg() to convert the interactive plotly plot to a static ggplot2 plot for rendering in this document. You can interact with the plot in your own script or Quarto document. If you’re not familiar with the pipe operator, see this article. We strongly recommend Tidvyerse for data manipulation and visualization in R, and Pmetrics works well with it. See R for Data Science for more information.\n\n\nModel objects\nYou can specify a model by reading a file or directly as a list object in R. We’ll do both.\nThe following code creates the same model as in /src/model.txt file. See further model details on creating models in R compared to text files. The advantage of creating them in R is that one does not need to copy model files into folders to provide necessary inputs.\n\nmod1 &lt;- PM_model$new(\n  pri = list(\n    Ka = ab(0.1, 0.9),\n    Ke = ab(0.001, 0.1),\n    V = ab(30, 120),\n    lag1 = ab(0, 4)\n  ),\n  cov = list(\n    wt = interp(),\n    africa = interp(\"none\"),\n    age = interp(),\n    gender = interp(\"none\"),\n    height = interp()\n  ),\n  eqn = function(){\n    two_comp_bolus\n  },\n  lag = function(){\n    lag[1] = lag1\n  },\n  out = function(){\n  Y[1] = X[2]/V\n  },\n  err = list(\n    proportional(5, c(0.02, 0.05, -0.0002, 0))\n  )\n)\n\nWhen you execute the above code in your own script or Quarto document, you will see a message indicating that the model has compiled.\n\nmod1 # prints the model object\n\n\n\n\n── Model summary ───────────────────────────────────────────────────────────────\n\n\n\n\n\n── Primary Parameters \n\n\nKa: [0.1, 0.9], ~N(0.5, 0.13)\n\n\nKe: [0.001, 0.1], ~N(0.05, 0.02)\n\n\nV: [30, 120], ~N(75, 15)\n\n\nlag1: [0, 4], ~N(2, 0.67)\n\n\n\n\n\n── Covariates \n\n\nwt, africa (no interpolation), age, gender (no interpolation), and height\n\n\n\n\n\n── Primary Equations \n\n\ntwo_comp_bolus\n\n\n\n\n\n── Lag Time \n\n\nlag[1] = lag1\n\n\n\n\n\n── Outputs \n\n\nY[1] = X[2]/V\n\n\n\n\n\n── Error Model \n\n\nProportional, with initial value of 5 and coefficients 0.02, 0.05, -2e-04, and\n0.\n\n\n\nmod1$plot() # static plot so do not need to pipe to plotlygg() \n\n\n\n\n\n\n\n\nWe have another file “model.txt” that contains the old representation of the same model we coded above, let’s take a look at it.\n\nsystem(\"cat ../Examples/src/model.txt\")\n\nYou can also open it in a text editor.\nPM_model$new() also accepts the path to a model file to create the same model using the file.\n\nmod1b &lt;- PM_model$new(\"../Examples/src/model.txt\")\nmod1b # look at it\n\nPM_model provides a method to update the different elements of a model, for example:\n\nmod1b$update(\n  pri = list(\n    ka = ab(0.001, 5)\n))\n\nIt is case sensitive, so ka is different from Ka. To remove a parameter, set it to NULL.\nTo copy a model use the $clone() method.\n\nmod1b &lt;- mod1$clone()\n\nSimply using mod1b &lt;- mod1 will cause mod1b to be changed if mod1 is changed, as R6 objects use reference semantics. For more details you can refer to [Advanced R] (https://adv-r.hadley.nz/r6.html), Section 14.4.\nLastly, Pmetrics has a model building app!\n\nbuild_model() #start from scratch\nbuild_model(exData) #start with data to match covariates\nbuild_model(mod1) #start with a model and update it\n\n\n\nFit the model to the data\nTo keep everything tidy, we are working in a folder specifically to store the runs.\n\nrun1 &lt;- mod1$fit(data = exData, run = 1, overwrite = TRUE, report = \"none\") \n\n\n\n\n── Notes: ──────────────────────────────────────────────────────────────────────\n\n\n• The previous run in folder '1' was overwritten.\n\n\n• Run results were saved in folder\n''/Users/mneely/Library/CloudStorage/OneDrive-CHILDRENSHOSPITALLOSANGELES/Documents/LAPK/Development/Pmetrics_rust/inst/Examples/Runs/1/outputs''\n\n\n• If assigned to a variable, e.g. `run1 &lt;-`, results of `fit()` are available\nin `run1`.\n\n\nNote: We suppressed the report in this tutorial, but if you copy the code into your own script, you can see the html summary report that is generated at the end of a run by removing the report = \"none\" argument.\nAfter the run is complete the results are returned to the assigned object, here ‘run1’. However, if you want to load the results later, you can use the PM_load() function. Runs will be sequentially numbered as /1, /2, /3,… in your working directory.\n\nrun1 &lt;- PM_load(1) # load the results from run 1 if returning to this script later\n\n\n\nExamine the results\n\nData\nYou can plot the original data using R6 with various options. Type ?plot.PM_data in the R console for help.\n\nrun1$data$plot() %&gt;% plotlygg() \n\n\n\n\n\n\n\n\nRemove the %&gt;% plotlygg() portion in your own script or Quarto document to generate an interactive plot. Mouse over the points to get information. Try clicking one of the points to see what happens.\nHere’s some nice grouping and coloring. If you use grouping, provide names in group_names and colors/symbols for each group as arguments to marker. Colors of lines will be set to the same as for marker to avoid a mess of colors.\n\nrun1$data$plot(xlim = c(119, 146), group = \"gender\", group_names = c(\"Male\", \"Female\"), \n  marker = list(color = c(\"red\",\"blue\"), symbol = c(\"circle\",\"triangle-up\"))) %&gt;% plotlygg()\n\n\n\n\n\n\n\n\nThe next one splits the data by subject but will not render easily in this document. You can interact with it in your own script or Quarto document.\n\nrun1$data$plot(overlay = FALSE, xlim = c(119, 145))\n\nThe following are the older S3 method with plot(...) for the first two examples. You can use R6 or S3 for any Pmetrics object. We will focus on R6 as the more modern way.\n\nplot(run1$data)\n\nHere’s a summary of the original data file; ?summary.PM_data for help.\n\nrun1$data$summary()\n\n\n\nObserved vs. Predicted (OP)\nYou can plot observed vs. predicted data. Type ?plot.PMop in the R console for help.\n\nrun1$op$plot() %&gt;% plotlygg()\n\n\n\n\n\n\n\n\nAs always, remove the %&gt;% plotlygg() portion in your own script or Quarto document to generate an interactive plot. Below, you can see how to change the prediction type, regression line and color, and plotting symbol and color. Most plots in Pmetrics have marker and line list arguments to customize the appearance of the plotting symbols and lines.\n\nrun1$op$plot(pred.type = \"pop\")\nrun1$op$plot(line = list(lm = FALSE, loess = list(color = \"red\")), marker = list(symbol = 3, color = \"green\"))\n\nGet a summary with bias and imprecision of the population predictions; ?summary.PMop for help. The default pred.type is “post”, which are the predictions based on the full Bayesian posterior distribution of parameter values for an individual. The predictions are the weighted mean or median (controlled by the icen argument in all Pmetrics functions) of the predictions from each support point in the individual’s Bayesian posterior, joint probability parameter distribution, i.e. the support points in the posterior. Here we will look at the population predictions based on the means of the parameter values.\n\nrun1$op$summary(pred.type = \"pop\", icen = \"mean\")\n\nSince neither “pop” nor “mean” are the defaults, we have to specify them. We can also use the S3 method for the same summary below.\n\nsummary(run1$op, pred.type = \"pop\", icen = \"mean\") # S3 method\n\nAs with any object in Pmetrics, the PM_op R6 object has fields and methods. Fields contain data and methods are functions that act on the data. All fields and methods are accessed with $ added to the name of the object. For example, in a PM_op object and most other Pmetrics objects, the raw data can be accessed via the $data field.\n\nrun1$op$data\n\nHaving the raw data provides a data frame compatible with any R function, particularly those from Tidyverse (see https://www.tidyverse.org/), including piping.\nThis allows pre-processing in ways more flexible than the default plot method.\n\nlibrary(tidyverse)\nrun1$op$data %&gt;% plot()\nrun1$op$data %&gt;%\n  filter(pred &gt; 5) %&gt;%\n  filter(pred &lt; 10) %&gt;%\n  summary()\n\nSee a header with the first 10 rows of the op object:\n\nhead(run1$op$data, 10)\n\n\n\nFinal population joint density\nPlot the final population joint density. Type ?plot.PM_final in the R console for help.\n\nrun1$final$plot()\n\nYou can add a kernel density curve.\n\nrun1$final$plot(line = list((color = \"red\")))\n#run1$final$data %&gt;% plot() #this way will work too\n\nIt is possible to make a bivariate plot. Plotting formulae in R are of the form y~x\n\nrun1$final$plot(ke ~ v,\n  marker = list(color = \"red\", symbol = \"diamond\"))\n\nThe original final object can be accessed with the $data field.\n\nrun1$final$data\nnames(run1$final$data)\n\nSee the population points:\n\nrun1$final$popPoints\n\n# A tibble: 20 × 5\n      ka     ke     v    lag1    prob\n   &lt;dbl&gt;  &lt;dbl&gt; &lt;dbl&gt;   &lt;dbl&gt;   &lt;dbl&gt;\n 1 0.898 0.0427 109.  2.09    0.0500 \n 2 0.899 0.0564 120.  0.678   0.0502 \n 3 0.360 0.0749  68.4 0.869   0.0500 \n 4 0.815 0.0758  60.5 1.12    0.0500 \n 5 0.899 0.0278  63.7 1.75    0.0506 \n 6 0.102 0.0639 120.  0.00843 0.0498 \n 7 0.690 0.0371  85.1 0.644   0.0503 \n 8 0.739 0.0590  65.0 0.821   0.0498 \n 9 0.362 0.0278  58.9 0.446   0.0494 \n10 0.707 0.0456  98.1 0.853   0.0498 \n11 0.748 0.0288  97.3 1.39    0.0500 \n12 0.552 0.0447 116.  0.316   0.0518 \n13 0.899 0.0331  74.4 1.14    0.0488 \n14 0.437 0.0711  42.6 3.99    0.0594 \n15 0.899 0.0340  74.9 2.01    0.0800 \n16 0.730 0.0574  53.6 3.04    0.0879 \n17 0.892 0.0608  32.5 3.11    0.0500 \n18 0.747 0.0397 120.  0.00315 0.0486 \n19 0.732 0.0581  53.3 3.04    0.00267\n20 0.899 0.0337  74.6 2.01    0.0209 \n\n\nOr drill down one more level into the raw data. The $final$popPoints field above pulls its information from the $final$data$popPoints field below, but is provided as a simpler way to access the population points.\n\nrun1$final$data$popPoints\n\nSee the population mean parameter values:\n\nrun1$final$popMean\n\n# A tibble: 1 × 4\n     ka     ke     v  lag1\n  &lt;dbl&gt;  &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt;\n1 0.697 0.0487  79.3  1.48\n\n\nSee a summary with confidence intervals around the medians and the Median Absolute Weighted Difference (MAWD); ?summary.PM_final for help and further explanation.\n\nrun1$final$summary()\n\n\n\nCycle information\nPlot cycle information; type ?plot.PM_cycle in the R console for help.\n\nrun1$cycle$plot()\n\nSummarize the cycle information; ?summary.PM_cycle for help.\n\nrun1$cycle$summary()\nrun1$cycle$data %&gt;% summary()\n\nEither one will work.\n\n\nCovariate information\nPlot covariate information; type ?plot.PM_cov in the R console for help. Recall that plotting formulae in R are of the form y~x.\n\nrun1$cov$plot(v ~ wt)\n\nYou can also use the raw data in the $data field to make plots with other R functions, including those from Tidyverse. Here we will filter the data for age &gt; 25 and then plot volume vs. weight.\n\nrun1$cov$data %&gt;%\n  filter(age &gt; 25) %&gt;%\n  plot(v ~ wt)\n\nChange the formatting of the plot with the line and marker list arguments.\n\nrun1$cov$plot(ke ~ age, line = list(loess = FALSE, lm = list(color = \"red\")),\n               marker = list(symbol = 3))\n\nAnother plot with mean Bayesian posterior parameter and covariate values…remember the icen argument?\n\nrun1$cov$plot(v ~ wt, icen = \"mean\")\n\nWhen time is the x variable, the y variable is aggregated by subject. In R plot formulae, calculations on the fly can be included using the I() function.\n\nrun1$cov$plot(I(v * wt) ~ time)\n\nThe above plots the product of volume and weight vs. time for each subject.\nThe previous cov object can be seen via run1$cov, which looks like a data frame, but is really an R6 PM_cov object whose $print() method returns a data frame. You can access the raw data with the $data field, which is truly a data frame.\n\nrun1$cov$data[, 1:3] # for example\nrun1$cov$data %&gt;% filter(gender == 1) %&gt;% summary() # using Tidyverse\n\nJust as you have the option to plot by mean covariate and posterior parameter values, you can summarize with means; ?summary.PM_cov for help.\n\nrun1$cov$summary(icen = \"mean\")\n\nThis returns a data frame with the means of the individual’s covariates over the observation period and the mean of the Bayesian posterior parameter values.\nWhen trying to find covariate-parameter relationships, it is convenient to examine at all possible covariate-parameter relationships by multiple linear regression with forward and backward elimination - type ?PM_step in the R console for help.\n\nrun1$step()\n\n…or on the cov object directly.\n\nrun1$cov$step()\n\nicen works here too.\n\nrun1$step(icen = \"mean\")\n\nIf you wish to see P values for forward elimination only:\n\nrun1$step(direction = \"forward\")"
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "About this site"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Learn Pmetrics",
    "section": "",
    "text": "These documents will help you learn how to use Pmetrics for R. They are designed to be read in sequence, so start with the first one.\nWhen you work on a project, best practice is to use the following workflow:\nIf you have loaded Pmetrics already with library(Pmetrics), the command PMtree() will create a project folder with subfolders for you. To learn more about this function or any other in R, you can get help by typing ?function_name in the console.\n?PMtree\nWe assume you have some familiarity with R and possibly Quarto. If not, there are many good tutorials online."
  },
  {
    "objectID": "index.html#how-to-use-these-pages",
    "href": "index.html#how-to-use-these-pages",
    "title": "Learn Pmetrics",
    "section": "How to use these pages",
    "text": "How to use these pages\nWe have designed these pages with the idea that you can copy and paste the code chunks into your own scripts or Quarto documents to see how they work. You can hover over the code chunks to see a copy icon. Click that to copy the code to your clipboard so you can paste it into your own script or document. Alternatively, you can click the “Copy all code” button at the top right of every page to copy all the code chunks on that page to your clipboard.\nNote: In many cases, we do not evaluate the code chunks because the ouput is too long, so you will need to run them in your own script or document.\n\n# Hover over the code chunk to see the copy icon."
  },
  {
    "objectID": "index.html#scripting",
    "href": "index.html#scripting",
    "title": "Learn Pmetrics",
    "section": "Scripting",
    "text": "Scripting\nYou can use either an R script or a Quarto document to paste code from these pages or to write your own code. R scripts have the advantage of being simple and easy to use. Quarto documents have the advantage of being able to combine code with formatted text, images, links, etc.\n\nR script\n\nCreate a new script with File -&gt; New File -&gt; R Script (Rstudio) or R File (Positron).\nSave the script in your project directory with a name like “Learn.R”.\nYou can then copy and paste code chunks from these pages into your script and run them line by line or all at once.\nIt is useful to annotate your code with comments like the one above so you can remember what you did later.\n\n\n\nQuarto document\n\nCreate a new document with File -&gt; New File -&gt; Quarto Document (Rstudio/Positron).\nUse markdown to add headings, links, images, etc.\nInsert R chunks to paste copied code or write your own.\n\nExecute code from the chunks.\nRender the document to create a nicely formatted output in HTML, PDF, or Word format.\nSee Quarto documentation for more information."
  },
  {
    "objectID": "index.html#exercises",
    "href": "index.html#exercises",
    "title": "Learn Pmetrics",
    "section": "Exercises",
    "text": "Exercises\n\nExercise 1 - NPAG run\nExercise 2 - NPAG with covariates\nExercise 3 - Compare models"
  },
  {
    "objectID": "Exercise_2.html",
    "href": "Exercise_2.html",
    "title": "Exercise 2",
    "section": "",
    "text": "NPAG with covariates\nLet’s create another run object, this time using a model that include covariates.\nFirst clone mod1.\n\nmod2 &lt;- mod1$clone()\n\nThen update it to add a variable V0, or volume that depends on weight. Remove V. Note that updating changes the object in place, so we don’t have to re-assign it back to mod2, i.e. we don’t need mod2 &lt;- mod2$update(...), although if you forget, it will work the same. Note that we also have to use the sec block to let Pmetrics know how to calculate V based on V0 and WT (weight). Here we normalize weight to the population mean of 55 kg.\n\nmod2$update(\n  pri = list(\n    V0 = ab(30, 120),\n    V = NULL\n  ),\n  sec = function(x) {\n    V = V0*(WT/55)\n  }\n)\n\nNow, run that new model.\n\nrun2 &lt;- mod2$fit(data = exData, run = 2, overwrite = TRUE)\n\nRight after the run, the results are in run2, but for future loading if you return to your script later, you can load it with PM_load().\n\nrun2 &lt;- PM_load(2)"
  },
  {
    "objectID": "Exercise_3.html",
    "href": "Exercise_3.html",
    "title": "Exercise 3",
    "section": "",
    "text": "Comparing models\nLet’s compare model 1 and model 2. You can compare any number of models. Type ?PM_compare for help. All models must already be loaded either with PM_load or assigning the result of $fit, e.g., run1 &lt;- mod1$fit(...).\n\nPM_compare(run1, run2)\n\nThis will open an html window in your browser with detailed comparisons between the models."
  }
]