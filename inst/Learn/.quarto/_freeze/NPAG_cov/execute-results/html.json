{
  "hash": "6ddcc904d20f3d6921f09c37bad02b73",
  "result": {
    "engine": "knitr",
    "markdown": "::: {.cell}\n\n:::\n\n\n\n\n\n\n# NPAG with covariates\n\nLet's create another run object, this time using a model that include covariates.\n\nFirst clone mod1.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmod2 <- mod1$clone()\n```\n:::\n\n\n\n\nThen update it to add a variable `V0`, or volume that depends on weight. Remove V. Note that updating changes the object in place, so we don't have to re-assign it back to mod2, i.e. we don't need `mod2 <- mod2$update(...)`, although if you forget, it will work the same. Note that we also have to use the `sec` block to let Pmetrics know how to calculate V based on V0 and WT (weight). Here we normalize weight to the population mean of 55 kg.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmod2$update(\n  pri = list(\n    V0 = ab(30, 120),\n    V = NULL\n  ),\n  sec = function(x) {\n    V = V0*(WT/55)\n  }\n)\n```\n:::\n\n\n\n\nNow, run that new model.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nrun2 <- mod2$fit(data = exData, run = 2, overwrite = TRUE)\n```\n:::\n\n\n\n\nRight after the run, the results are in `run2`, but for future loading if you return to your script later, you can load it with `PM_load()`.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nrun2 <- PM_load(2)\n```\n:::\n",
    "supporting": [
      "NPAG_cov_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}