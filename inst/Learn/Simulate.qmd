```{r}
#| eval: true
#| echo: false
#| message: false
#library(Pmetrics)
devtools::load_all()
```


```{r}
#| label: setup
#| include: false
#| echo: false
#| eval: true

exData <- PM_data$new(data = "../Examples/src/ex.csv", loq = 1)
mod1 <- PM_model$new("../Examples/src/model.txt")
run2 <- PM_load(file = "../Examples/Runs/2/outputs/PMout.Rdata")
```


# Simulations

::: {.callout-tip} 
## Learn more
Refer to the reference article: [Simulation](https://lapkb.github.io/Pmetrics/articles/simulation.html) 
:::

## Basic simulation

The following will simulate 100 sets of parameters/concentrations using the model, population parameter values,
first subject in the data all attached to `run1` (exercise on [first NPAG run](NPAG.qmd)).

Setting `limits = NA` makes the simulated parameter values stay within the same ranges as in the model for `run1`.

```{r}
#| eval: true
simdata <- run2$sim(include = 1, limits = NA, nsim = 100)
```

Below is the alternate way to simulate, which is particularly useful if you define 
your own population parameters. See `?PM_sim` for details on this as well as
the article on simulation.

```{r}
#| eval: true

# define population parameters for simulation
poppar <- list(
  mean = list(ka = 0.6, ke = 0.05, v = 77.8, lag1 = 1.2),
  cov = diag(c(0.07, 0.0004, 830, 0.45))
)

# now we need to provide parameter value distributions (poppar), data, and model
simOther <- PM_sim$new(poppar = poppar, data = exData, model = mod1,
                       include = 1, limits = NA, nsim = 100)
```

Simulate from a model with new data.

```{r}
#| eval: true
sim_new <- run2$sim(
  data = "../Examples/src/ptaex1.csv",
  include = 2, limits = NA,
  predInt = c(120, 144, 1)
)
```




Plot them; `?plot.PM_sim` for help.

```{r}
#| eval: true
simdata$plot() %>% plotlygg()
simOther$plot() %>% plotlygg()
sim_new$plot(log = FALSE) %>% plotlygg()
```


Simulate using multiple subjects as templates.

```{r}
#| eval: true
simdata <- run2$sim(include = 1:4, limits = NA, nsim = 100)
```

Plot the third simulation; use include/exclude to specify the ID numbers, which are the same as the ID numbers in the template data file


```{r}
#| eval: true
simdata$plot(include = 3) %>% plotlygg() # one regimen
simdata$plot(exclude = 3) %>% plotlygg() # all but one regimen; notice the jagged profiles arising from combining different regimens
```




## Simulate with covariates
In this case we use the covariate-parameter correlations from run 2, which are found in the `cov` field. We re-define the mean weight to be 50 with SD of 20, and limits of 10 to 70 kg.  We fix africa, gender and height covariates, but allow age (the last covariate) to be simulated, using the mean, sd, and limits in the original population, since we didn't specify them. See ?SIMrun for more help on this.

```{r}
#| eval: true
covariate <- list(
  cov = run2$cov,
  mean = list(wt = 50),
  sd = list(wt = 20),
  limits = list(wt = c(10, 70)),
  fix = c("africa", "gender", "height")
)
```



Now simulate with this covariate list object.

```{r}
#| eval: true
simdata3 <- run2$sim(include = 1:4, limits = NA, nsim = 100, covariate = covariate)

```

There are subtle differences between simulations with and without covariates simulated, all other inputs the same.

```{r}
#| eval: true
simdata$plot(include = 4) %>% plotlygg() # without covariates
simdata3$plot(include = 4) %>% plotlygg() # ...and with covariates simulated
```



Here are the simulated parameters and covariates for the first subject's
template; note that both wt and age are simulated, using proper covariances
with simulated PK parameters.

```{r}
#| eval: true
simdata3$data$parValues
```

We can summarize simulations too. See `?summary.PM_sim` for help.

```{r}
#| eval: true
simdata3$summary(field = "obs", include = 3)
```

Next, we'll see the first of two applications of simulation: internal validation of a model.