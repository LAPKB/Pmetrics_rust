---
title: "Exercise 2"
format: html
---

```{r}
#| eval: true
#| echo: false
#| message: false
#library(Pmetrics)
devtools::load_all()
```


```{r}
#| label: setup
#| include: false
#| echo: false
#| eval: true

exData <- PM_data$new(data = "../Examples/src/ex.csv", loq = 1)
mod1 <- PM_model$new("../Examples/src/model.txt")
```

# NPAG with covariates

Let's create another run object, this time using a model that include covariates.

First clone mod1.

```{r}
#| eval: true
mod2 <- mod1$clone()
```

Then update it to add a variable `V0`, or volume that depends on weight. Remove V. Note that updating changes the object in place, so we don't have to re-assign it back to mod2, i.e. we don't need `mod2 <- mod2$update(...)`, although if you forget, it will work the same. Note that we also have to use the `sec` block to let Pmetrics know how to calculate V based on V0 and WT (weight). Here we normalize weight to the population mean of 55 kg.

```{r}
#| eval: true
mod2$update(
  pri = list(
    V0 = ab(30, 120),
    V = NULL
  ),
  sec = function(x) {
    V = V0*(WT/55)
  }
)

```

Now, run that new model.

```{r}
run2 <- mod2$fit(data = exData, run = 2, overwrite = TRUE)
```

Right after the run, the results are in `run2`, but for future loading if you return to your script later, you can load it with `PM_load()`.

```{r}
run2 <- PM_load(2)
```

