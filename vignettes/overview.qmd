---
title: "Overview"
resources: 
  - Data
format:
  html:
    toc: true
    toc-title: "On this page"
    number-sections: true
    code-fold: false
    css: Styles/style.css

vignette: >
  %\VignetteIndexEntry{Overview}
  %\VignetteEngine{quarto}
  %\VignetteEncoding{UTF-8}
---

```{r, include = FALSE}
knitr::opts_chunk$set(
  collapse = TRUE,
  comment = "#>"
)
```

```{r setup, echo=F, message=F}
library(Pmetrics)
library(gt)

r_help <- function(pkg, name) {
    glue::glue("[`{name}`](https://rdrr.io/pkg/{pkg}/man/{name}.html)")
}

gh_help <- function(name) {

    glue::glue("[`{name}`](https://lapkb.github.io/Pmetrics/reference/{name}.html)")

}


custom_table <- function(tab){
  system.file("extData", tab, package = "Pmetrics") %>%
    read.csv(na.strings = ".") %>% gt() %>%
    tab_style(
      style = list(
        cell_fill(color = "black"),
        cell_text(color = "white", weight = "bold")
      ),
      locations = cells_column_labels(everything())
    )
}

```

## Software engines ‚öôÔ∏è

There are three main software engines that Pmetrics controls currently.

<!-- * **IT2B** is the ITerative 2-stage Bayesian parametric population PK modeling -->

<!-- program. It is generally used to estimate parameter ranges to pass to -->

<!-- NPAG. It will estimate values for population model parameters under the -->

<!-- assumption that the underlying distributions of those values are normal -->

<!-- or transformed to normal, e.g. log normal. -->

-   **NPAG** is the Non-parametric Adaptive Grid software. It will create a non-parametric population model consisting of discrete support points, each with a set of estimates for all parameters in the model plus an associated probability (weight) of that set of estimates. There can be at most one point for each subject in the study population. There is no need for any assumption about the underlying distribution of model parameter values.

-   **NPOD** is the Non-parametric Optimal Design software. Like NPAG, it will create a non-parametric population model consisting of discrete support points, each with a set of estimates for all parameters in the model plus an associated probability (weight) of that set of estimates. While NPAG searches parameter hyperspace randomly, NPOD uses likelihood gradients to search systematically. This usually results in faster convergence, but currently, NPOD is more likely to get stuck in a "local" minimum of the likelihood surface, i.e. it has a higher chance of not finding the globally optimal support points. NPOD is under active development.

-   The **Simulator** is a semi-parametric Monte Carlo simulation software program that can use the output of NPAG of NPOD to build randomly generated response profiles (e.g. time-concentration curves) for a given population model, parameter estimates, and data input. Simulation from a non-parametric joint density model, i.e. NPAG output, is possible, with each point serving as the mean of a multivariate normal distribution, weighted according to the weight of the point. The covariance matrix of the entire set of support points is divided equally among the points for the purposes of simulation.

## Pmetrics control functions üéõÔ∏è

Pmetrics uses `r gh_help("PM_data")` to create data objects and `r gh_help("PM_model")` to create model objects. When a model is created, it is compiled and ready to be combined with the data and parameters within the model's `$fit()` method, generating probability distributions for primary model parameters. `PM_data` and `PM_model` objects and their methods are extensively documented within R by using the `help(command)` or `?command` syntax.

The `$fit()` method replaces these Legacy functions: `ITrun`, `ERRrun`, `NPrun`.

Invoking the simulator in R6 becomes a method attached to `PM_result` objects or by using `PM_sim$new()` for models, parameter value probability distributions and template data not derived from a previous fit, e.g. when lifted from an article.

### Fit method üìà

Once a `PM_model` object is compiled, combine it with a data file, and fit the model to the data using the `$fit()` method.

```{r echo=T, eval=FALSE}
run1 <- mod1$fit(data, ...) #... are options listed in ?PM_model for the $fit method

```

For the Simulator, the `$sim` method for a `PM_result` object will execute the program directly within R and return a `PM_sim` object.

```{r echo=T, eval=FALSE}
run1 <- PM_load(1)
sim1 <- run1$sim(data = "new.csv") # uses the model and parameter joint density from run1, but replaces the data with new.csv
```

The first line loads previous results of run 1 into a `PM_result` object called **run1**. The second line uses the model and prior in run1 with new data template. `sim1` is a `r gh_help("PM_sim")` object.

An equivalent method is to create a new `PM_sim` is directly with `PM_sim$new()`. It also returns a `PM_sim()` object, i.e. there is no longer any need to run `SIMparse`. Creating simulations this way allows total freedom with respect to the model, the prior, and the data template.

```{r echo=T, eval=FALSE}
sim1 <- PM_sim$new(poppar = list(...), model = "model.txt", data = "new.csv")
```

See `vignette("simulation")` for details on specifying `poppar` this way.

For the simulator the results are returned automatically to the object assigned to contain the output of the simulation, e.g. `sim1` below.

```{r echo=T, eval=FALSE}
sim1 <- PM_result$sim(...)
```

As mentioned above, there is no longer any need to use the `SIMparse` Legacy function, because the `SIMrun` and `SIMparse` Legacy functions are combined within the `$sim()` method for `PM_result` objects or the `PM_sim$new()` method.

### Saving functions üíæ

The Pmetrics R6 objects `PM_data`, `PM_result()`, `PM_sim()`, `PM_valid()`, and `PM_pta()` all have a `$save()` method. This method saves the object to the hard drive in the current working directory by default. The format is .rds which is a binary format used by R to save individual objects. The purpose of the `$save()` method is to enable retrieval of the object at a later time.

### Loading functions üìÇ

After a successful NPAG or NPOD run, `PM_load()` creates a `PM_result()` object rather than loading run results into the current environment and suffixed with the run number as for legacy mode.

```{r echo=T, eval=FALSE}
res1 <- PM_load(1)
res1$op$plot()
```

For  `PM_sim()`, `PM_valid()`, and `PM_pta()` use the `$new()` method and provide the full or relative path (if not in the working directory) and name of an .rds file created by the corresponding `$save()` method.

```{r echo=T, eval=FALSE}
sim1 <- PM_sim$new("sim.rds")
```

### Report generation üìÑ

The `r gh_help("PM_report")` function is automatically run at the end of a successful run, and it will generate an HTML page with summaries of the run, as well as the .Rdata files and other objects. The default browser will be automatically launched for viewing of the HTML report page.

## Other functions

Within Pmetrics there are also functions to manipulate data .csv files and process and plot extracted data.

### Data manipulation

Comparison between the current and the Legacy methods are shown for education.

```{r echo=F}
custom_table("RLcomp_data.csv")
```

### Model selection and diagnostics

Comparison between the current and the Legacy methods are shown for education.

```{r echo=F}
custom_table("RLcomp_valid.csv")
```

### Other functions

Comparison between the current and the Legacy methods are shown for education.

```{r echo=F}
custom_table("RLcomp_other.csv")
```

<!-- * Process data: `makeAUC`, `makeCov`, `makeCycle`, `makeFinal`, `makeOP`, `makePTA`, -->

<!-- `makeErrorPoly` -->

<!-- * Plot data: `plot.PMcov`, `plot.PMcycle`, `plot.PMfinal`, `plot.PMmatrix`, -->

<!-- `plot.PMop`,`plot.PMsim`, `plot.PMvalid`, `plot.PMpta` -->

<!-- * Pmetrics function defaults: `setPMoptions`, `getPMoptions` -->

Again, all functions have extensive help files and examples which can be examined in R by using the `help(command)` or `?command` syntax.