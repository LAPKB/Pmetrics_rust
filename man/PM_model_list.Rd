% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/PM_model.R
\name{PM_model_list}
\alias{PM_model_list}
\title{Create PM_model from list of lists}
\description{
Create PM_model from list of lists

Create PM_model from list of lists
}
\note{
This function can only be used with the Rust backend. If the backend is not set to "rust",
an error will be thrown.
}
\examples{

## ------------------------------------------------
## Method `PM_model_list$update`
## ------------------------------------------------

\dontrun{
model$update(list(pri = list(ka = c(0.1, 0.2)), out = list(Y1 = list(val = "C1"))))
}

## ------------------------------------------------
## Method `PM_model_list$compile`
## ------------------------------------------------

\dontrun{
model$compile()
}


## ------------------------------------------------
## Method `PM_model_list$simulate_one`
## ------------------------------------------------

\dontrun{
data <- PM_data$new(...)
spp <- c(1.0, 2.0, 3.0)
result <- model$simulate_one(data, spp)
}


## ------------------------------------------------
## Method `PM_model_list$simulate_all`
## ------------------------------------------------

\dontrun{
data <- PM_data$new(...)
theta <- matrix(c(1.0, 20.0, 2.0, 70.0), nrow = 2, byrow = TRUE)
result <- model$simulate_all(data, theta)
}


## ------------------------------------------------
## Method `PM_model_list$parameters`
## ------------------------------------------------

\dontrun{
model$parameters()
}

}
\author{
Michael Neely
}
\section{Super class}{
\code{\link[Pmetrics:PM_model]{Pmetrics::PM_model}} -> \code{PM_model_list}
}
\section{Public fields}{
\if{html}{\out{<div class="r6-fields">}}
\describe{
\item{\code{model_list}}{The model list object}

\item{\code{binary_path}}{The path to the compiled model binary. Used by the rust backend.}
}
\if{html}{\out{</div>}}
}
\section{Methods}{
\subsection{Public methods}{
\itemize{
\item \href{#method-PM_model_list-new}{\code{PM_model_list$new()}}
\item \href{#method-PM_model_list-write}{\code{PM_model_list$write()}}
\item \href{#method-PM_model_list-write_rust}{\code{PM_model_list$write_rust()}}
\item \href{#method-PM_model_list-update}{\code{PM_model_list$update()}}
\item \href{#method-PM_model_list-compile}{\code{PM_model_list$compile()}}
\item \href{#method-PM_model_list-fit}{\code{PM_model_list$fit()}}
\item \href{#method-PM_model_list-simulate_one}{\code{PM_model_list$simulate_one()}}
\item \href{#method-PM_model_list-simulate_all}{\code{PM_model_list$simulate_all()}}
\item \href{#method-PM_model_list-parameters}{\code{PM_model_list$parameters()}}
\item \href{#method-PM_model_list-clone}{\code{PM_model_list$clone()}}
}
}
\if{html}{\out{
<details open><summary>Inherited methods</summary>
<ul>
<li><span class="pkg-link" data-pkg="Pmetrics" data-topic="PM_model" data-id="get_primary"><a href='../../Pmetrics/html/PM_model.html#method-PM_model-get_primary'><code>Pmetrics::PM_model$get_primary()</code></a></span></li>
<li><span class="pkg-link" data-pkg="Pmetrics" data-topic="PM_model" data-id="plot"><a href='../../Pmetrics/html/PM_model.html#method-PM_model-plot'><code>Pmetrics::PM_model$plot()</code></a></span></li>
<li><span class="pkg-link" data-pkg="Pmetrics" data-topic="PM_model" data-id="print"><a href='../../Pmetrics/html/PM_model.html#method-PM_model-print'><code>Pmetrics::PM_model$print()</code></a></span></li>
</ul>
</details>
}}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-PM_model_list-new"></a>}}
\if{latex}{\out{\hypertarget{method-PM_model_list-new}{}}}
\subsection{Method \code{new()}}{
\ifelse{html}{\href{https://lifecycle.r-lib.org/articles/stages.html#stable}{\figure{lifecycle-stable.svg}{options: alt='[Stable]'}}}{\strong{[Stable]}}
Generates a model from a list of lists.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{PM_model_list$new(model_list)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{model_list}}{The appropriate list.}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-PM_model_list-write"></a>}}
\if{latex}{\out{\hypertarget{method-PM_model_list-write}{}}}
\subsection{Method \code{write()}}{
\ifelse{html}{\href{https://lifecycle.r-lib.org/articles/stages.html#stable}{\figure{lifecycle-stable.svg}{options: alt='[Stable]'}}}{\strong{[Stable]}}
Transforms model list in to a text file
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{PM_model_list$write(model_path = "genmodel.txt", engine = "npag")}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{model_path}}{Name of the file to be created.}

\item{\code{engine}}{Currently only "npag".}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-PM_model_list-write_rust"></a>}}
\if{latex}{\out{\hypertarget{method-PM_model_list-write_rust}{}}}
\subsection{Method \code{write_rust()}}{
\ifelse{html}{\href{https://lifecycle.r-lib.org/articles/stages.html#stable}{\figure{lifecycle-stable.svg}{options: alt='[Stable]'}}}{\strong{[Stable]}}
Fills in the template file with the model information
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{PM_model_list$write_rust(file_name = "parsed_model.txt")}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{file_name}}{Name of the file to be created.}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-PM_model_list-update"></a>}}
\if{latex}{\out{\hypertarget{method-PM_model_list-update}{}}}
\subsection{Method \code{update()}}{
Updates the PM_model object with new values.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{PM_model_list$update(changes_list)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{changes_list}}{A list of changes to be made to the model.}
}
\if{html}{\out{</div>}}
}
\subsection{Examples}{
\if{html}{\out{<div class="r example copy">}}
\preformatted{\dontrun{
model$update(list(pri = list(ka = c(0.1, 0.2)), out = list(Y1 = list(val = "C1"))))
}
}
\if{html}{\out{</div>}}

}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-PM_model_list-compile"></a>}}
\if{latex}{\out{\hypertarget{method-PM_model_list-compile}{}}}
\subsection{Method \code{compile()}}{
Compiles a PM_model object using the Rust backend.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{PM_model_list$compile()}\if{html}{\out{</div>}}
}

\subsection{Details}{
This function compiles a PM_model object into a binary format using the Rust backend.
It writes the model to a temporary file, compiles it, and stores the path to the compiled binary.
}

\subsection{Examples}{
\if{html}{\out{<div class="r example copy">}}
\preformatted{\dontrun{
model$compile()
}

}
\if{html}{\out{</div>}}

}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-PM_model_list-fit"></a>}}
\if{latex}{\out{\hypertarget{method-PM_model_list-fit}{}}}
\subsection{Method \code{fit()}}{
Fit model to data
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{PM_model_list$fit(
  data = NULL,
  run = NULL,
  include = NULL,
  exclude = NULL,
  cycles = 100,
  prior = "sobol",
  density0 = 0.01,
  seed = 23,
  overwrite = FALSE,
  algorithm = "NPAG",
  report = getPMoptions("report_template")
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{data}}{Either the name of a  \link{PM_data}
object in memory or the quoted name of a Pmetrics
data file in the current working directory, which will crate a \link{PM_data}
object on the fly. However, if created on the fly, this object
will not be available to other
methods or other instances of \link{PM_fit}.}

\item{\code{run}}{Specify the run number of the output folder.  Default if missing is the next available number.}

\item{\code{include}}{Vector of subject id values in the data file to include in the analysis.
The default (missing) is all.}

\item{\code{exclude}}{A vector of subject IDs to exclude in the analysis, e.g. \code{c(4,6:14,16:20)}}

\item{\code{cycles}}{Number of cycles to run. Default is 100.}

\item{\code{prior}}{The distribution for the initial support points, which can be
one of several options.
\itemize{
\item The default is "sobol", which is a semi-random distribution. This is the distribution
typically used when fitting a new model to the data. An example of this is
on our \href{https://www.lapk.org/images/sobol_3d_plot.html}{website}.
}

The following all specify non-random, informative prior distributions. They
are useful for either continuing a previous
run which did not converge or for fitting a model to new data, whether to simply
calculate Bayesian posteriors with \code{cycles = 0} or to revise the model to a new
covergence with the new data.
\itemize{
\item The name of a suitable \link{PM_result} object from a prior run loaded with \link{PM_load}.
This starts from the non-uniform, informative distribution obtained at the end of a prior NPAG run.
Example: \verb{run1 <- PM_load(1); fit1$run(prior = run1)}.
\item A character string with the filename of a csv file containing a prior distribution with
format as for 'theta.csv' in the output folder of a prior run: column headers are parameter
names, and rows are the support point values. A final column with probabilities
for each support point is not necessary, but if present will be ignored, as these
probabilities are calculated by the engine. Note that the parameter names must match the
names of the primary variables in the model. Example: \code{fit1$run(prior = "mytheta.csv")}.
\item The number of a previous run with \code{theta.csv} in the output folder which will be read
as for the filename option above. Example: \code{fit1$run(prior = 2)}.
\item A data frame obtained from reading an approriate file, such that the data frame
is in the required format described in the filename option above. Example:
\verb{mytheta <- read_csv("mytheta.csv"); fit1$run(prior = mytheta)}.
}}

\item{\code{density0}}{The proportion of the volume of the model parameter
hyperspace used to calculate the initial number of support points if one of
the semi-random, uniform distributions are selected in the \code{prior} argument
above. The initial points are
spread through that hyperspace and begin the search for the optimal
parameter value distribution (support points) in the population.
The volume of the parameter space is the product of the ranges for all parameters.
For example if using two parameters \code{Ke} and \code{V}, with ranges of [0, 5] and [10, 100],
the volume is (5 - 0) x (100 - 10) = 450 The default value of \code{density0} is 0.01, so the initial
number of support points will be 0.01 x 450 = 4.5, increased to the nearest integer,
which is 5. The greater the initial number of points, the less chance of
missing the globally maximally likely parameter value distribution,
but the slower the run.}

\item{\code{seed}}{Seed used if \code{prior = "sobol"}. Ignored otherwise.}

\item{\code{overwrite}}{Boolean operator to overwrite existing run result folders.  Default is \code{FALSE}.}

\item{\code{algorithm}}{The algorithm to use for the run.  Default is "NPAG". Alternatives: "NPOD".}

\item{\code{report}}{If missing, the default Pmetrics report template as specified in \link{getPMoptions}
is used. Otherwise can be "plotly", "ggplot", or "none".}

\item{\code{intern}}{Run NPAG in the R console without a batch script.  Default is TRUE.}

\item{\code{artifacts}}{Default is \code{TRUE}.  Set to \code{FALSE} to suppress creating the \code{etc} folder. This folder
will contain all the compilation artifacts created during the compilation and run steps.}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
A successful run will result in creation of a new folder in the working
directory with the results inside the folder.
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-PM_model_list-simulate_one"></a>}}
\if{latex}{\out{\hypertarget{method-PM_model_list-simulate_one}{}}}
\subsection{Method \code{simulate_one()}}{
Simulates a single scenario using the provided data and parameter values.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{PM_model_list$simulate_one(data, spp)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{data}}{A \code{PM_data} object containing the data for the simulation.}

\item{\code{spp}}{A numeric vector representing the parameter values for the simulation.}
}
\if{html}{\out{</div>}}
}
\subsection{Details}{
This function simulates a single scenario using the provided data and parameter values.
It requires the data to be a \code{PM_data} object and the parameter values to be a numeric vector.
The length of the parameter vector must match the number of parameters in the model.
The function writes the data to a temporary CSV file and uses the Rust backend to perform the simulation.
If the model is not already compiled, it will be compiled before the simulation.

If the data contains more than one scenario, only the first scenario will be used for the simulation.
}

\subsection{Returns}{
A data frame with the following columns: id, time, out, outeq, state, state_index, spp_index.
}
\subsection{Examples}{
\if{html}{\out{<div class="r example copy">}}
\preformatted{\dontrun{
data <- PM_data$new(...)
spp <- c(1.0, 2.0, 3.0)
result <- model$simulate_one(data, spp)
}

}
\if{html}{\out{</div>}}

}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-PM_model_list-simulate_all"></a>}}
\if{latex}{\out{\hypertarget{method-PM_model_list-simulate_all}{}}}
\subsection{Method \code{simulate_all()}}{
Simulates multiple scenarios using the provided data and parameter values.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{PM_model_list$simulate_all(data, theta)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{data}}{A \code{PM_data} object containing the data for the simulation.}

\item{\code{theta}}{A matrix of numeric values representing the parameter values for the simulation.}
}
\if{html}{\out{</div>}}
}
\subsection{Details}{
This function simulates multiple scenarios using the provided data and parameter values.
It requires the data to be a \code{PM_data} object and the parameter values to be a numeric matrix.
The number of columns in the parameter matrix must match the number of parameters in the model.
The function writes the data to a temporary CSV file and uses the Rust backend to perform the simulation.
If the model is not already compiled, it will be compiled before the simulation.
}

\subsection{Returns}{
A data frame with the following columns: id, time, out, outeq, state, state_index, spp_index.
}
\subsection{Examples}{
\if{html}{\out{<div class="r example copy">}}
\preformatted{\dontrun{
data <- PM_data$new(...)
theta <- matrix(c(1.0, 20.0, 2.0, 70.0), nrow = 2, byrow = TRUE)
result <- model$simulate_all(data, theta)
}

}
\if{html}{\out{</div>}}

}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-PM_model_list-parameters"></a>}}
\if{latex}{\out{\hypertarget{method-PM_model_list-parameters}{}}}
\subsection{Method \code{parameters()}}{
Retrieves the list of model parameters from the compiled version of the model.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{PM_model_list$parameters()}\if{html}{\out{</div>}}
}

\subsection{Details}{
This function returns a list of the model parameters in the compiled version of the model.
It only works with the Rust backend. If the backend is not set to "rust", an error will be thrown.
}

\subsection{Returns}{
A list of model parameters.
}
\subsection{Examples}{
\if{html}{\out{<div class="r example copy">}}
\preformatted{\dontrun{
model$parameters()
}

}
\if{html}{\out{</div>}}

}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-PM_model_list-clone"></a>}}
\if{latex}{\out{\hypertarget{method-PM_model_list-clone}{}}}
\subsection{Method \code{clone()}}{
The objects of this class are cloneable with this method.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{PM_model_list$clone(deep = FALSE)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{deep}}{Whether to make a deep clone.}
}
\if{html}{\out{</div>}}
}
}
}
